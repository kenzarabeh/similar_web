"""
Logique de r√©cup√©ration r√©troactive des donn√©es SimilarWeb
G√®re les cas o√π les donn√©es ne sont pas imm√©diatement disponibles
"""
from datetime import datetime, timedelta
from typing import List, Tuple, Dict
import logging

logger = logging.getLogger(__name__)

class RetroactiveDataExtractor:
    def __init__(self, api_client, bigquery_client):
        self.api = api_client
        self.bq = bigquery_client
        self.max_lookback_days = 7  # Chercher jusqu'√† 7 jours en arri√®re
        self.data_availability_delay = 2  # Les donn√©es sont g√©n√©ralement disponibles apr√®s 2-3 jours
        
    def daily_extraction_handler(self, event=None, context=None):
        """
        Fonction principale appel√©e quotidiennement par Cloud Scheduler
        Exemple: Ex√©cut√©e le mercredi 3 janvier √† 2h du matin
        """
        current_date = datetime.now().date()
        logger.info(f"üöÄ Extraction quotidienne d√©marr√©e le {current_date}")
        
        # 1. Identifier toutes les dates √† v√©rifier
        dates_to_check = self.get_dates_to_check(current_date)
        logger.info(f"üìÖ Dates √† v√©rifier: {[d.strftime('%Y-%m-%d') for d in dates_to_check]}")
        
        # 2. Pour chaque date, v√©rifier et extraire si n√©cessaire
        extraction_summary = {
            'already_extracted': [],
            'newly_extracted': [],
            'not_available': [],
            'errors': []
        }
        
        for check_date in dates_to_check:
            result = self.process_date(check_date)
            extraction_summary[result['status']].append(check_date)
        
        # 3. Rapport final
        self.generate_report(extraction_summary)
        
        return extraction_summary
    
    def get_dates_to_check(self, current_date) -> List[datetime.date]:
        """
        Retourne la liste des dates √† v√©rifier
        Exemple: Le mercredi 3, on v√©rifie:
        - Lundi 1er (J-2)
        - Dimanche 31 (J-3)
        - Samedi 30 (J-4)
        - ... jusqu'√† J-7
        """
        dates = []
        for days_back in range(self.data_availability_delay, self.max_lookback_days + 1):
            dates.append(current_date - timedelta(days=days_back))
        return dates
    
    def process_date(self, target_date) -> Dict:
        """
        Traite une date sp√©cifique
        """
        logger.info(f"\nüîç V√©rification pour {target_date}...")
        
        # √âtape 1: V√©rifier si d√©j√† dans BigQuery
        if self.data_exists_in_bigquery(target_date):
            logger.info(f"‚úÖ Donn√©es d√©j√† extraites pour {target_date}")
            return {'status': 'already_extracted', 'date': target_date}
        
        # √âtape 2: Tester la disponibilit√© dans l'API
        is_available = self.check_api_availability(target_date)
        
        if not is_available:
            logger.info(f"‚è≥ Donn√©es pas encore disponibles pour {target_date}")
            return {'status': 'not_available', 'date': target_date}
        
        # √âtape 3: Extraire les donn√©es
        try:
            logger.info(f"üöÄ Extraction des donn√©es pour {target_date}...")
            self.extract_data_for_date(target_date)
            logger.info(f"‚úÖ Extraction r√©ussie pour {target_date}")
            return {'status': 'newly_extracted', 'date': target_date}
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'extraction pour {target_date}: {e}")
            return {'status': 'errors', 'date': target_date, 'error': str(e)}
    
    def data_exists_in_bigquery(self, target_date) -> bool:
        """
        V√©rifie si les donn√©es existent d√©j√† dans BigQuery
        """
        query = f"""
        SELECT COUNT(*) as count
        FROM `similarweb-intel-dev.similarweb_data.segments_data`
        WHERE DATE(date) = '{target_date}'
        """
        
        result = list(self.bq.query(query).result())
        return result[0].count > 0
    
    def check_api_availability(self, target_date) -> bool:
        """
        Teste si les donn√©es sont disponibles dans l'API
        Utilise un seul segment pour tester (√©conomise les cr√©dits API)
        """
        # Utiliser le premier segment comme test
        test_segment_id = "00d0e096-5b68-46cb-a570-3edf5849623a"  # Feuvert par exemple
        
        try:
            response = self.api.get_segment_data(
                segment_id=test_segment_id,
                start_date=target_date.strftime('%Y-%m'),
                end_date=target_date.strftime('%Y-%m'),
                granularity='daily'
            )
            
            # V√©rifier si on a des donn√©es pour cette date sp√©cifique
            if response and 'segments' in response:
                for segment in response['segments']:
                    if segment.get('date') == target_date.strftime('%Y-%m-%d'):
                        return True
            return False
            
        except Exception:
            return False
    
    def extract_data_for_date(self, target_date):
        """
        Extrait toutes les donn√©es pour une date donn√©e
        """
        # Formater les dates pour l'API (format mensuel)
        month_str = target_date.strftime('%Y-%m')
        
        # 1. Extraire les 88 segments personnels
        segments_data = self.api.extract_all_segments(
            start_date=month_str,
            end_date=month_str,
            user_only=True,
            granularity='daily'  # Important pour avoir le d√©tail quotidien
        )
        
        # 2. Filtrer uniquement les donn√©es de la date cible
        filtered_segments = []
        for segment in segments_data:
            if segment.get('data') and segment['data'].get('segments'):
                for seg_data in segment['data']['segments']:
                    if seg_data.get('date') == target_date.strftime('%Y-%m-%d'):
                        filtered_segments.append({
                            'segment_id': segment['segment_id'],
                            'segment_name': segment['segment_name'],
                            'data': {'segments': [seg_data]},
                            'extraction_date': datetime.now().strftime('%Y-%m-%d')
                        })
        
        # 3. Upload vers BigQuery
        if filtered_segments:
            self.upload_to_bigquery(filtered_segments)
    
    def generate_report(self, summary: Dict):
        """
        G√©n√®re un rapport de l'extraction
        """
        logger.info("\nüìä RAPPORT D'EXTRACTION R√âTROACTIVE")
        logger.info("=" * 50)
        
        if summary['newly_extracted']:
            logger.info(f"‚úÖ Nouvelles donn√©es extraites ({len(summary['newly_extracted'])}):")
            for date in summary['newly_extracted']:
                logger.info(f"   - {date}")
        
        if summary['already_extracted']:
            logger.info(f"‚úì D√©j√† extraites ({len(summary['already_extracted'])}):")
            for date in summary['already_extracted']:
                logger.info(f"   - {date}")
        
        if summary['not_available']:
            logger.info(f"‚è≥ Pas encore disponibles ({len(summary['not_available'])}):")
            for date in summary['not_available']:
                days_old = (datetime.now().date() - date).days
                logger.info(f"   - {date} (J-{days_old})")
        
        if summary['errors']:
            logger.info(f"‚ùå Erreurs ({len(summary['errors'])}):")
            for date in summary['errors']:
                logger.info(f"   - {date}")


# Exemple d'utilisation
if __name__ == "__main__":
    # Simulation pour le mercredi 3 janvier 2025
    print("\nüîÑ EXEMPLE DE R√âCUP√âRATION R√âTROACTIVE")
    print("Scenario: Nous sommes le mercredi 3 janvier 2025")
    print("La Cloud Function v√©rifie les 7 derniers jours...")
    print("\nDates v√©rifi√©es:")
    print("- Lundi 1er janvier (J-2) - Peut-√™tre disponible")
    print("- Dimanche 31 d√©cembre (J-3) - Probablement disponible")
    print("- Samedi 30 d√©cembre (J-4) - Disponible")
    print("- ... jusqu'√† J-7")
    print("\nR√©sultat possible:")
    print("‚úÖ 30 & 31 d√©cembre: Donn√©es extraites")
    print("‚è≥ 1er janvier: Pas encore disponible (sera r√©cup√©r√© demain)")
    print("‚úì 29, 28, 27 d√©cembre: D√©j√† dans BigQuery") 